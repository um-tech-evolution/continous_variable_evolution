10/6/17

Notes on testing whether a sample (list) of reals comes from a specified distribution.

Our distributions of concern are normal and lognormal.

The most approriate tests seem to be the Shapiro-Wilk and the Anderson-Darling tests.
Both of these are most commonly used for testing for normality, and the R implementations
only do this test.  The Julia implementation does the Anderson-Darling test for an
arbitrary distribution, but returns the A^2 statistic.  To get a p-value, you must
look up conversions from A^2 to p-value, and this is not done autormatically.

One way to test for a lognormal distribution is to test if the log of the sample is normal.

R implementation:
-----------------

A reference on distributions:  http://www.stat.umn.edu/geyer/old/5101/rlook.html
Another on lognormal:  https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Lognormal.html

Example from the first web page:

 x <- rnorm(1000, mean=100, sd=15)     # rnorm produces random samples
 hist(x, probability=TRUE)
 xx <- seq(min(x), max(x), length=100)
 lines(xx, dnorm(xx, mean=100, sd=15)) # dnorm is the pdf

Example for lognormal:
hist(rlnorm(1000, mean=10, sd=1),probability=TRUE,breaks=100)

The lines part of the above example doesn't work.

We can apply the log to the random sample:
 hist(log(rlnorm(1000, mean=10, sd=1)),probability=TRUE,breaks=100)
and this histogram is approximately normal.

The Shapiro-Wilk test is built in to R.
 shapiro.test(log(rlnorm(1000,mean=10,sd=1)))
Results look reasonable for testing for lognormality.

The Anderson-Darling test is in the nortest library:

 install.packages("nortest")  # Only do this once
 library(nortest)
 ad.test(log(rlnorm(1000,mean=4,sd=1)))

 x = seq(0,8,length=100)
 plot(x,dlnorm(x,log(4)),type="l")   # plots lognormal distribution
 plot(seq(-2,6,length=100),dlnorm(exp(x),4),type="l")   # plots lognormal transformed to normal.

QQ plots demonstrate normality and deviations from normality.
http://www.astrostatistics.psu.edu/su07/R/html/stats/html/qqnorm.html

 qqnorm(rlnorm(1000,mean=4,sd=1))
 qqline(rlnorm(1000,mean=4,sd=1),col="red")

 qqnorm(log(rlnorm(1000,mean=4,sd=1)))
 qqline(log(rlnorm(1000,mean=4,sd=1)),col="red")

The above works with the attribute_mean column of the CSV file produced by the "cont_var.jl" program
with a given N and mutstddev.  Example from data/10_8_17:
> csv_dfN10 = read.csv("N10_na1_mutstddev_bi400_T2000_neutral.csv",comment.char="#")
> ad.test(log(csv_dfN10$attribute_mean))
        Anderson-Darling normality test
data:  log(csv_dfN10$attribute_mean)
A = 0.27529, p-value = 0.6597

> shapiro.test(log(csv_dfN10$attribute_mean))
        Shapiro-Wilk normality test
data:  log(csv_dfN10$attribute_mean)
W = 0.99927, p-value = 0.6394

> qqnorm(log(csv_dfN10$attribute_mean))
> qqline(log(csv_dfN10$attribute_mean),col="red")

===================================================================================
R using saved populations from neutral.jl
---------------------------------------------------------------
> setwd("../data/10_10_17")
df = read.csv("N100_ngens1000_T30_pops.csv",comment.char="#")
> ad.test(log(df$P1))
        Anderson-Darling normality test
data:  log(df$P1)
A = 1.9768, p-value = 4.515e-05
> r1=ad.test(log(df$P1))
> names(r1)
[1] "statistic" "p.value"   "method"    "data.name"
> for( n in names(df) ){
+    print( ad.test(df[[n]])$p.value )
+ }
[1] 2.073451e-05
[1] 1.439932e-13
[1] 3.7e-24
[1] 7.156903e-05
[1] 3.7e-24
[1] 0.0001574657
[1] 0.000930721
[1] 3.413803e-11
[1] 6.521368e-18
[1] 0.00103734
[1] 2.443464e-11
[1] 3.7e-24
[1] 2.843097e-05
[1] 0.3599176
[1] 2.929251e-08
[1] 0.0008097207
[1] 0.0003677972
[1] 1.01633e-05
[1] 5.978166e-08
[1] 0.0007426173
[1] 3.290917e-11
[1] 6.557666e-11
[1] 0.001008826
[1] 3.7e-24
[1] 2.403416e-10
[1] 1.386729e-12
[1] 0.002370623
[1] 1.295047e-05
[1] 0.003559415
[1] 1.218362e-21
> qqnorm(log(df$P14))
> qqline(log(df$P14))




Julia implementation:
---------------------

using Distributions
using HypothesisTests

julia> Base.Random.rand(LogNormal(log(4)),3)   # generates a vector of 3 random numbers from lognormal dist

julia> OneSampleADTest(log(rand(LogNormal(log(4)),100)),Normal(log(4)))

julia> mm = mean(log(p1))
0.007668694622768255

julia> r = OneSampleADTest(log(p1),Normal(mm))
One sample Anderson-Darling test
--------------------------------
Population details:
    parameter of interest:   not implemented yet
    value under h_0:         NaN
    point estimate:          NaN

Test summary:
    outcome with 95% confidence: fail to reject h_0
    one-sided p-value:           0.08234831268060203

Details:
    number of observations:   10
    sample mean:              0.007668694622768255
    sample SD:                0.04410279794288319
    AÂ² statistic:             0.6062812445469937

julia> pvalue(r)
0.08234831268060203



